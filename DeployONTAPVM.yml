---
- hosts: localhost 
  name: Deploy ONTAP Simulator 
  gather_facts: false
  vars:
    vsim_ova: './OVA/vsim-netapp-DOT9.8-cm_nodar.ova'
    vm_name: DataONTAP
    vm_memory_mb: 8192 
    vm_num_vcpus: 2
    cluster_network: "Cluster Network"
    data_network: "VM Network"
    sys_serial_number: "4082368-50-7" #the two current options are 408236-50-7, or 4034389-06-2
    nvram_sysid: "4082{{ 9 | random(start=0) }}{{ 9 | random(start=0) }}{{ 9 | random(start=0) }}{{ 9 | random(start=0) }}07" #the two current options are 408236507, or 4034389062
    vdevinit: "23:14:0,23:14:1" #This string represents the simulated disk configuration type:qty:shelf
    ontap_node_mgmt_ip: ""
    ontap_netmask: "255.255.255.0"
    ontap_gateway: ""
    esxi_address: 192.168.123.49
    esxi_username: root
    esxi_password: Changeme!
    esxi_datastore: lab_ansible_v2
    esxi_login: &esxi_login
      hostname: '{{ esxi_address }}'
      username: '{{ esxi_username }}'
      password: '{{ esxi_password }}'   
      validate_certs: no 
  # vars_files: 
  #   - vars-esx.yml
  #   - vars-vsim1.yml
  tasks:
  - vmware_deploy_ovf:
      <<: *esxi_login
#      datacenter: 'lab_ansible_v2'
#      cluster: '{{ vcenter_cluster }}'
      datastore: "{{esxi_datastore}}"
      name: "{{vm_name}}"
      ovf: "{{vsim_ova}}"
      disk_provisioning: thin
      power_on: no
      networks: "{u'hostonly':u'{{ cluster_network }}',u'nat':u'{{ data_network }}'}"
      wait_for_ip_address: false
    delegate_to: localhost
    retries: 10
    delay: 60
    register: result           
    until: result is succeeded 
  - name: Adjust VM Sizing
    vmware_guest:
      <<: *esxi_login
      name: '{{ vm_name }}'
      state: present
      hardware:
        memory_mb: "{{ vm_memory_mb}}"
        num_cpus: '{{ vm_num_vcpus }}'
      customvalues:
        - key: pciHole.start
          value: 1024  # Moving the PCI hole here gives ONTAP access to more system ram
    delegate_to: localhost
  - name: Start VM
    vmware_guest:
      <<: *esxi_login
      name: '{{ vm_name }}'
      state: poweredon
      wait_for_ip_address: false
    delegate_to: localhost
  - name: Wait for 5 seconds for loader
    wait_for: timeout=5
    delegate_to: localhost
  - name: Press Space to interrupt autoboot
    community.vmware.vmware_guest_sendkey:
      <<: *esxi_login
      name: "{{ vm_name }}"
      keys_send: SPACE
    delegate_to: localhost
  - name: configure loader variable via sendkeys
    community.vmware.vmware_guest_sendkey:
      <<: *esxi_login
      name: "{{ vm_name }}"
      keys_send: ENTER
      string_send: "{{item}}"
    delegate_to: localhost
    loop: 
      - "setenv SYS_SERIAL_NUMBER {{sys_serial_number}}"
      - "setenv bootarg.nvram.sysid {{nvram_sysid}}"
      - "setenv bootarg.vm.sim.vdevinit {{vdevinit}}"
      - "setenv bootarg.sim.vdevinit {{vdevinit}}"
      - "boot_ontap"
      - " " # this final space is here to force the enter key after the preceding command
  - name: Wait for VMware tools to become available
    community.vmware.vmware_guest_tools_wait:
      <<: *esxi_login
      name: '{{ vm_name }}'
    delegate_to: localhost
    retries: 3
    delay: 15
    register: result           
    until: result is succeeded 
  - name: Reboot-Guest #this is to help ensure we land at the setup script
    community.vmware.vmware_guest_powerstate:
      <<: *esxi_login 
      name: '{{ vm_name }}'
      state: reboot-guest
    delegate_to: localhost
    register: deploy
    when: ontap_node_mgmt_ip != ""
  - name: Wait for 30 seconds for VM Tools to stop
    wait_for: timeout=30
    delegate_to: localhost
    when: ontap_node_mgmt_ip != ""
  - name: Wait for VMware tools to become available
    community.vmware.vmware_guest_tools_wait:
      <<: *esxi_login
      name: '{{ vm_name }}'
    delegate_to: localhost
    retries: 3
    delay: 15
    register: result           
    until: result is succeeded
    when: ontap_node_mgmt_ip != "" 
  - name: Wait for 30 seconds for 2nd boot to complete
    wait_for: timeout=30
    delegate_to: localhost
    when: ontap_node_mgmt_ip != ""    
  - name: Complete Node Setup
    community.vmware.vmware_guest_sendkey:
      <<: *esxi_login
      name: "{{ vm_name }}"
      keys_send: ENTER
      string_send: "{{item}}"
    delegate_to: localhost
    loop: 
      - "yes"
      - "e0c" # node mgmt port
      - "{{ontap_node_mgmt_ip}}"
      - "{{ontap_netmask}}"
      - "{{ontap_gateway}}"
      - " " # this completes the node setup phase
    when: ontap_node_mgmt_ip != ""


