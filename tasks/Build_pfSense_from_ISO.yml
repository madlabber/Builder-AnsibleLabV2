---
# - name: Create pfSense VM from scratch
#   hosts: localhost
#   gather_facts: false
#   vars:
#     install_iso: "pfSense-CE-2.4.5-RELEASE-p1-amd64.iso"
#     install_iso_url: "https://atxfiles.pfsense.org/mirror/downloads/pfSense-CE-2.4.5-RELEASE-p1-amd64.iso.gz"
#     iso_datastore: "ISOs"
#     vm_name: lab_ansible_v2_gateway
#     vm_password_new: P@ssw0rd
#     vm_disk_gb: 10
#     vm_memory_mb: 1024
#     vm_num_cpus: 1
#     vm_network_wan: "VM Network"
#     vm_network_lan: "lab_ansible_v2_1"
#     config_xml_file: "pfsense/conf.xml"
#     esxi_address: 192.168.123.49
#     esxi_username: root
#     esxi_password: P@ssw0rd
#     esxi_fqdn: esxhost.mylab.com
#     vm_datastore: lab_ansible_v2
#     esxi_login: &esxi_login
#       hostname: '{{ esxi_address }}'
#       username: '{{ esxi_username }}'
#       password: '{{ esxi_password }}'   
#       validate_certs: no 
#     vm_login: &vm_login
#       vm_username: "root"
#       vm_password: '{{ vm_password_new }}'
#       vm_id: '{{ vm_name }}'
#     retry_settings: &retry_settings
#       retries: 6
#       delay: 10 
#       register: result           
#       until: result is succeeded       
#   tasks:
- name: Check if install ISO exists
  community.vmware.vsphere_file:
    host: '{{ esxi_address }}'
    username: '{{ esxi_username }}'
    password: '{{ esxi_password }}'   
    validate_certs: no
    datacenter: ""
    datastore: "{{ iso_datastore }}"
    path: "{{ install_iso }}"
    state: file
  register: install_iso_exists
  delegate_to: localhost
  ignore_errors: true 
- name: Add ESXi to Ansible Hosts for SSH
  add_host:
    name: '{{ esxi_address }}'
    group: "esx"
    ansible_user: '{{ esxi_username }}'
    ansible_password: '{{ esxi_password }}'
    ansible_ssh_common_args: '-o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no'
  when: install_iso_exists.failed
- name: Enable ESX SSH (TSM-SSH)
  community.vmware.vmware_host_service_manager:
    hostname: '{{ esxi_address }}'
    username: '{{ esxi_username }}'
    password: '{{ esxi_password }}'   
    validate_certs: no 
    esxi_hostname: '{{ esxi_address }}'
    service_name: TSM-SSH
    state: present
  register: tsm_ssh_service
  delegate_to: localhost
  when: install_iso_exists.failed
- name: Enable ESX Shell (TSM)
  community.vmware.vmware_host_service_manager:
    hostname: '{{ esxi_address }}'
    username: '{{ esxi_username }}'
    password: '{{ esxi_password }}'   
    validate_certs: no 
    esxi_hostname: '{{ esxi_address }}'
    service_name: TSM
    state: present
  register: tsm_service
  delegate_to: localhost
  when: install_iso_exists.failed
- name: Download the pfSense ISO
  shell: 'wget -P /vmfs/volumes/{{ iso_datastore }} {{ install_iso_url }}'
  args:
    creates: '/vmfs/volumes/{{ iso_datastore }}/{{ install_iso }}.gz'
  delegate_to: '{{ esxi_address }}'
  when: install_iso_exists.failed
- name: Extract the pfSense ISO
  shell: 'gunzip /vmfs/volumes/{{ iso_datastore }}/{{ install_iso }}.gz'
  args:
    creates: '/vmfs/volumes/{{ iso_datastore }}/{{ install_iso }}'
  delegate_to: '{{ esxi_address }}'
  when: install_iso_exists.failed
- name: Disable ESX SSH (TSM-SSH)
  community.vmware.vmware_host_service_manager:
    hostname: '{{ esxi_address }}'
    username: '{{ esxi_username }}'
    password: '{{ esxi_password }}'   
    validate_certs: no 
    esxi_hostname: '{{ esxi_address }}'
    service_name: TSM-SSH
    state: absent
  delegate_to: localhost
  when: tsm_ssh_service.changed
- name: Disable ESX Shell (TSM)
  community.vmware.vmware_host_service_manager:
    hostname: '{{ esxi_address }}'
    username: '{{ esxi_username }}'
    password: '{{ esxi_password }}'   
    validate_certs: no 
    esxi_hostname: '{{ esxi_address }}'
    service_name: TSM
    state: absent
  delegate_to: localhost
  when: tsm_service.changed
- name: Create VM
  community.vmware.vmware_guest:
    hostname: '{{ esxi_address }}'
    username: '{{ esxi_username }}'
    password: '{{ esxi_password }}'   
    validate_certs: no 
    folder: /
    name: '{{ vm_name }}'
    state: present
    guest_id: centos7_64Guest
    cdrom:
        - controller_number: 0
          unit_number: 0
          state: present
          type: iso
          iso_path: '[{{ iso_datastore }}] {{ install_iso }}'
    disk:
    - size_gb: '{{ vm_disk_gb }}'
      type: thin
      datastore: '{{ vm_datastore }}'
    hardware:
      memory_mb: '{{ vm_memory_mb }}'
      num_cpus: '{{ vm_num_cpus }}'
      scsi: lsilogicsas
    networks:
    - name: '{{ vm_network_wan }}'
      device_type: e1000
    - name: '{{ vm_network_lan }}'
      device_type: e1000
    wait_for_ip_address: no
  delegate_to: localhost
  register: deploy_vm
- name: Set boot order
  community.vmware.vmware_guest_boot_manager:
    hostname: '{{ esxi_address }}'
    username: '{{ esxi_username }}'
    password: '{{ esxi_password }}'   
    validate_certs: no 
    name: '{{ vm_name }}'
    boot_delay: 1000
    enter_bios_setup: False
    boot_retry_enabled: True
    boot_retry_delay: 20000
    boot_firmware: bios
    secure_boot_enabled: False
    boot_order:
      - disk
      - cdrom
      - ethernet
      - floppy
  delegate_to: localhost
- name: Power-On the virtual machine
  community.vmware.vmware_guest_powerstate:
    hostname: '{{ esxi_address }}'
    username: '{{ esxi_username }}'
    password: '{{ esxi_password }}'   
    validate_certs: no 
    name: '{{ vm_name }}'
    state: powered-on
  delegate_to: localhost
  register: powerstate
- name: Wait for 60 seconds
  wait_for: timeout=60
  delegate_to: localhost
- name: Blind Install
  community.vmware.vmware_guest_sendkey:
    hostname: '{{ esxi_address }}'
    username: '{{ esxi_username }}'
    password: '{{ esxi_password }}'   
    validate_certs: no 
    name: "{{ vm_name }}"
    keys_send: ENTER
    string_send: "{{item}}"
  delegate_to: localhost
  loop: 
    - "" # enter
    - "" # enter
    - "" # enter
    - "" # enter
- name: Wait for 120 seconds
  wait_for: timeout=120
  delegate_to: localhost
- name: Blind Install part 2
  community.vmware.vmware_guest_sendkey:
    hostname: '{{ esxi_address }}'
    username: '{{ esxi_username }}'
    password: '{{ esxi_password }}'   
    validate_certs: no 
    name: "{{ vm_name }}"
    keys_send: ENTER
    string_send: "{{item}}"
  delegate_to: localhost
  loop: 
    - "" # enter
    - "" # enter
- name: Wait for 120 seconds
  wait_for: timeout=120
  delegate_to: localhost
- name: Blind Install part 3 - Open-VM-Tools
  community.vmware.vmware_guest_sendkey:
    hostname: '{{ esxi_address }}'
    username: '{{ esxi_username }}'
    password: '{{ esxi_password }}'   
    validate_certs: no 
    name: "{{ vm_name }}"
    keys_send: ENTER
    string_send: "{{item}}"
  delegate_to: localhost
  loop: 
    - "8" # enter
    - "pkg install -y pfSense-pkg-Open-VM-Tools" # enter
    - "reboot"
    - ""
- name: Wait for VMware tools to become available 
  community.vmware.vmware_guest_tools_wait:
    hostname: '{{ esxi_address }}'
    username: '{{ esxi_username }}'
    password: '{{ esxi_password }}'   
    validate_certs: no 
    name: '{{ vm_name }}'
  delegate_to: localhost
  retries: 10
  delay: 60
  register: result           
  until: result is succeeded

# push config file
- name: copy file to vm 
  community.vmware.vmware_guest_file_operation:
    hostname: '{{ esxi_address }}'
    username: '{{ esxi_username }}'
    password: '{{ esxi_password }}'   
    validate_certs: no 
    #datacenter: "{{ datacenter_name }}"
    vm_id: '{{ vm_name }}'
    vm_username: "admin"
    vm_password: "pfsense" # defaults are still in effect at this point
    copy:
        src: "{{config_xml_file}}"
        dest: "/cf/conf/config.xml"
        overwrite: True
  delegate_to: localhost
  when: config_xml_file != ""

- name: Reboot-Guest
  community.vmware.vmware_guest_powerstate:
    hostname: '{{ esxi_address }}'
    username: '{{ esxi_username }}'
    password: '{{ esxi_password }}'   
    validate_certs: no 
    name: '{{ vm_name }}'
    state: reboot-guest
  delegate_to: localhost
  register: deploy
- name: Wait for 30 seconds
  wait_for: timeout=30
  delegate_to: localhost
  when: config_xml_file != ""

- name: Wait for VMware tools to become available by name
  community.vmware.vmware_guest_tools_wait:
    hostname: '{{ esxi_address }}'
    username: '{{ esxi_username }}'
    password: '{{ esxi_password }}'   
    validate_certs: no 
    name: '{{ vm_name }}'
  delegate_to: localhost
  retries: 3
  delay: 15
  register: result           
  until: result is succeeded 
  when: config_xml_file != ""

# Any additional packages required need to be installed 
- name: Run shell commands via vm_shell
  community.vmware.vmware_vm_shell:
    hostname: '{{ esxi_address }}'
    username: '{{ esxi_username }}'
    password: '{{ esxi_password }}'   
    validate_certs: no 
    vm_username: "root"
    vm_password: '{{ vm_password_new }}'
    vm_id: '{{ vm_name }}'
    vm_shell: '/bin/sh'
    vm_shell_args: "{{item}}"
    wait_for_process: true
  delegate_to: localhost  
  loop:
    - "-c \"pkg install -y pfSense-pkg-tftpd\""

 
