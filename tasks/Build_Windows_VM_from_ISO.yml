---
- name: Create kickstart ISO
  community.general.iso_create:
    src_files:
      - "{{unattend_file}}"
    dest_iso: "files/{{config_iso}}"
    interchange_level: 3
    joliet: 3
    vol_ident: UNATTEND
- name: Copy kickstart iso to datastore
  community.vmware.vsphere_copy:
    hostname: '{{ esxi_address }}'
    username: '{{ esxi_username }}'
    password: '{{ esxi_password }}'   
    validate_certs: no 
    src: "files/{{config_iso}}"
#      datacenter: DC1 Someplace
    datastore: "{{ vm_datastore }}"
    path: "{{config_iso}}"
  delegate_to: localhost
  ignore_errors: true #if the playbook is being re-run while the vm is on, the iso cannot be replaced
- name: Check if install ISO exists
  community.vmware.vsphere_file:
    host: '{{ esxi_address }}'
    username: '{{ esxi_username }}'
    password: '{{ esxi_password }}'   
    validate_certs: no
    datacenter: ""
    datastore: "{{ iso_datastore }}"
    path: "{{ install_iso }}"
    state: file
  register: install_iso_exists
  delegate_to: localhost
  ignore_errors: true 
- name: Add ESXi to Ansible Hosts for SSH
  add_host:
    name: '{{ esxi_address }}'
    group: "esx"
    ansible_user: '{{ esxi_username }}'
    ansible_password: '{{ esxi_password }}'
    ansible_ssh_common_args: '-o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no'
  when: install_iso_exists.failed
- name: Enable ESX SSH (TSM-SSH)
  community.vmware.vmware_host_service_manager:
    hostname: '{{ esxi_address }}'
    username: '{{ esxi_username }}'
    password: '{{ esxi_password }}'   
    validate_certs: no 
    esxi_hostname: '{{ esxi_address }}'
    service_name: TSM-SSH
    state: present
  register: tsm_ssh_service
  delegate_to: localhost
  when: install_iso_exists.failed
- name: Enable ESX Shell (TSM)
  community.vmware.vmware_host_service_manager:
    hostname: '{{ esxi_address }}'
    username: '{{ esxi_username }}'
    password: '{{ esxi_password }}'   
    validate_certs: no 
    esxi_hostname: '{{ esxi_address }}'
    service_name: TSM
    state: present
  register: tsm_service
  delegate_to: localhost
  when: install_iso_exists.failed
- name: Download the Windows Server ISO
  shell: 'wget -P /vmfs/volumes/{{ iso_datastore }} {{ install_iso_url }}'
  args:
    creates: '/vmfs/volumes/{{ iso_datastore }}/{{ install_iso }}'
  delegate_to: '{{ esxi_address }}'
  when: install_iso_exists.failed
- name: Disable ESX SSH (TSM-SSH)
  community.vmware.vmware_host_service_manager:
    hostname: '{{ esxi_address }}'
    username: '{{ esxi_username }}'
    password: '{{ esxi_password }}'   
    validate_certs: no 
    esxi_hostname: '{{ esxi_address }}'
    service_name: TSM-SSH
    state: absent
  delegate_to: localhost
  when: tsm_ssh_service.changed
- name: Disable ESX Shell (TSM)
  community.vmware.vmware_host_service_manager:
    hostname: '{{ esxi_address }}'
    username: '{{ esxi_username }}'
    password: '{{ esxi_password }}'   
    validate_certs: no 
    esxi_hostname: '{{ esxi_address }}'
    service_name: TSM
    state: absent
  delegate_to: localhost
  when: tsm_service.changed
- name: Create VM
  community.vmware.vmware_guest:
    hostname: '{{ esxi_address }}'
    username: '{{ esxi_username }}'
    password: '{{ esxi_password }}'   
    validate_certs: no 
    folder: /
    name: '{{ vm_name }}'
    state: present
    guest_id: '{{vm_guest_id}}'
    cdrom:
        - controller_number: 0
          unit_number: 0
          state: present
          type: iso
          iso_path: '[{{ iso_datastore }}] {{ install_iso }}'
        - controller_number: 0
          unit_number: 1
          state: present
          type: iso
          iso_path: '[{{ vm_datastore }}] {{ config_iso }}'
    disk:
    - size_gb: '{{ vm_disk_gb }}'
      type: thin
      datastore: '{{ vm_datastore }}'
    hardware:
      memory_mb: '{{ vm_memory_mb }}'
      num_cpus: '{{ vm_num_cpus }}'
      scsi: lsilogicsas
    networks:
    - name: '{{ vm_network }}'
      device_type: e1000
    wait_for_ip_address: no
  delegate_to: localhost
  register: deploy_vm
- name: Set boot order
  community.vmware.vmware_guest_boot_manager:
    hostname: '{{ esxi_address }}'
    username: '{{ esxi_username }}'
    password: '{{ esxi_password }}'   
    validate_certs: no 
    name: '{{ vm_name }}'
    boot_delay: 1000
    enter_bios_setup: False
    boot_retry_enabled: True
    boot_retry_delay: 20000
    boot_firmware: bios
    secure_boot_enabled: False
    boot_order:
      - cdrom
      - disk
      - ethernet
      - floppy
  delegate_to: localhost
  register: vm_boot_order
- name: Power-On the virtual machine
  community.vmware.vmware_guest_powerstate:
    hostname: '{{ esxi_address }}'
    username: '{{ esxi_username }}'
    password: '{{ esxi_password }}'   
    validate_certs: no 
    name: '{{ vm_name }}'
    state: powered-on
  delegate_to: localhost
  register: powerstate
- name: Wait for VMware tools to become available 
  community.vmware.vmware_guest_tools_wait:
    hostname: '{{ esxi_address }}'
    username: '{{ esxi_username }}'
    password: '{{ esxi_password }}'   
    validate_certs: no 
    name: '{{ vm_name }}'
  delegate_to: localhost
  retries: 10
  delay: 60
  register: result           
  until: result is succeeded 
- name: Set password via vmware_vm_shell
  community.vmware.vmware_vm_shell:
    hostname: '{{ esxi_address }}'
    username: '{{ esxi_username }}'
    password: '{{ esxi_password }}'   
    validate_certs: no 
    vm_username: "{{vm_username}}"
    vm_password: '{{ vm_password_new }}'
    vm_id: '{{ vm_name }}'
    vm_password: '{{ vm_password_old }}'
    vm_shell: 'c:\windows\system32\windowspowershell\v1.0\powershell.exe'
    vm_shell_args: '-command "(net user Administrator {{ vm_password_new }})"'
    wait_for_process: true
  delegate_to: localhost
  ignore_errors: yes
- name: Set static IP address
  community.vmware.vmware_vm_shell:
    hostname: '{{ esxi_address }}'
    username: '{{ esxi_username }}'
    password: '{{ esxi_password }}'   
    validate_certs: no 
    vm_username: "{{vm_username}}"
    vm_password: '{{ vm_password_new }}'
    vm_id: '{{ vm_name }}'
    vm_shell: 'c:\windows\system32\windowspowershell\v1.0\powershell.exe'
    vm_shell_args: "{{item}}"
    wait_for_process: true
  delegate_to: localhost
  retries: 6
  delay: 10 
  register: result           
  until: result is succeeded      
  loop:
    - "-command \"(new-netipaddress -InterfaceAlias Ethernet0 -IPAddress {{ vm_address }} -prefixlength {{vm_netmask_cidr}} -defaultgateway {{ vm_gateway }})\""
  when: vm_address != ""
- name: Set DNS Server
  community.vmware.vmware_vm_shell:
    hostname: '{{ esxi_address }}'
    username: '{{ esxi_username }}'
    password: '{{ esxi_password }}'   
    validate_certs: no 
    vm_username: "{{vm_username}}"
    vm_password: '{{ vm_password_new }}'
    vm_id: '{{ vm_name }}'
    vm_shell: 'c:\windows\system32\windowspowershell\v1.0\powershell.exe'
    vm_shell_args: "{{item}}"
    wait_for_process: true
  delegate_to: localhost
  retries: 6
  delay: 10 
  register: result           
  until: result is succeeded      
  loop:
    - "-command \"(Set-DnsClientServerAddress -InterfaceAlias Ethernet0 -ServerAddresses {{ vm_dns_server }})\""
  when: vm_dns_server != ""
- name: Enable RDP
  community.vmware.vmware_vm_shell:
    hostname: '{{ esxi_address }}'
    username: '{{ esxi_username }}'
    password: '{{ esxi_password }}'   
    validate_certs: no 
    vm_username: "{{vm_username}}"
    vm_password: '{{ vm_password_new }}'
    vm_id: '{{ vm_name }}'
    vm_shell: 'c:\windows\system32\windowspowershell\v1.0\powershell.exe'
    vm_shell_args: "{{item}}"
    wait_for_process: true
  delegate_to: localhost
  retries: 6
  delay: 10 
  register: result           
  until: result is succeeded      
  loop:
    - "-command \"(set-ItemProperty -Path 'HKLM:\\System\\CurrentControlSet\\Control\\Terminal Server' -name fDenyTSConnections -Value 0)\""
    - "-command \"(Enable-NetFirewallRule -DisplayGroup 'Remote Desktop')\""
- name: Rename Computer
  community.vmware.vmware_vm_shell:
    hostname: '{{ esxi_address }}'
    username: '{{ esxi_username }}'
    password: '{{ esxi_password }}'   
    validate_certs: no 
    vm_username: "{{vm_username}}"
    vm_password: '{{ vm_password_new }}'
    vm_id: '{{ vm_name }}'
    vm_shell: 'c:\windows\system32\windowspowershell\v1.0\powershell.exe'
    vm_shell_args: "{{item}}"
    wait_for_process: true
  delegate_to: localhost
  retries: 6
  delay: 10 
  register: result           
  until: result is succeeded      
  loop:
    - "-command \"(Rename-Computer -NewName {{ vm_hostname }})\""
  when: vm_hostname != ""
- name: Reboot-Guest
  community.vmware.vmware_guest_powerstate:
    hostname: '{{ esxi_address }}'
    username: '{{ esxi_username }}'
    password: '{{ esxi_password }}'   
    validate_certs: no 
    name: '{{ vm_name }}'
    state: reboot-guest
  delegate_to: localhost
  register: deploy
  when: vm_hostname != ""
- name: Wait for 30 seconds
  wait_for: timeout=30
  delegate_to: localhost
  when: vm_hostname != ""
- name: Wait for VMware tools to become available by name
  community.vmware.vmware_guest_tools_wait:
    hostname: '{{ esxi_address }}'
    username: '{{ esxi_username }}'
    password: '{{ esxi_password }}'   
    validate_certs: no 
    name: '{{ vm_name }}'
  delegate_to: localhost
  retries: 3
  delay: 15
  register: result           
  until: result is succeeded 
  when: vm_hostname != ""
- name: Wait for 30 seconds for VMware Tools refresh
  wait_for: timeout=30
  delegate_to: localhost
- name: Find the VM's IP Address via VMware tools
  community.vmware.vmware_guest_info:
    hostname: '{{ esxi_address }}'
    username: '{{ esxi_username }}'
    password: '{{ esxi_password }}'   
    validate_certs: no 
    datacenter: ha-datacenter
    name: '{{ vm_name }}'
  delegate_to: localhost
  register: vmfacts
- debug: msg="IP Address - {{ vmfacts['instance']['ipv4'] }}"  







